/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-06-29 12:42:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.tjoeun.service.InsertService;
import com.tjoeun.vo.GuestbookVO;

public final class insertOK_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.tjoeun.vo.GuestbookVO");
    _jspx_imports_classes.add("com.tjoeun.service.InsertService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	// 한글 깨짐 방지
	request.setCharacterEncoding("UTF-8");
/*
// inset.jsp에서 넘어오는 데이터를 받는다.
	String name = request.getParameter("name");	
	String password = request.getParameter("password");	
	String memo = request.getParameter("memo");	
	String ip = request.getParameter("ip");	
//	out.println(name + ", " + password + ", " + memo + ", " + ip + "<br/>");
	
	GuestbookVO vo = new GuestbookVO();
	vo.setName(name);
	vo.setPassword(password);
	vo.setMemo(memo);
	vo.setIp(ip);
	out.println(vo);
*/

      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("	useBean 액션 태그로 inset.jsp에서 넘어오는 데이터를 GuestbookVO 클래스 객체에 저장한다. \r\n");
      out.write("	이전 페이지에서 넘어오는 데이터가 GuestbookVO 클래스 필드로 존재하면 useBean으로 받고 \r\n");
      out.write("	존재하지 않으면 request.getParameter()를 이용해서 받는다.\r\n");
      out.write("	setProperty 액션 태그는 지정한 필드의 setter 메소드를 실행한다.\r\n");
      out.write("	property 속성에는 setter 메소드를 실행할 필드 이름을 쓴다.\r\n");
      out.write("	name 속성에는 setter 메소드를 실행할 필드가 정의된 객체 이름을 입력한다.\r\n");
      out.write("	useBean 액션 태그를 사용하면 이전 페이지에서 form에 저장되서 넘어오는 데이터를 받는\r\n");
      out.write("	동작을 별도로 코딩하지 않아도 useBean이 자동으로 받아서 처리한다.\r\n");
      out.write("	property 속성에 \"*\"을 입력하면 모든 필드의 setter 메소드가 일괄적으로 실행된다.\r\n");
      out.write("	단, form의 name 속성의 속성값과 같은 이름을 가지는 필드의 setter 메소드만 실행된다.\r\n");
      out.write("-->\r\n");
      com.tjoeun.vo.GuestbookVO vo = null;
      vo = (com.tjoeun.vo.GuestbookVO) _jspx_page_context.getAttribute("vo", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (vo == null){
        vo = new com.tjoeun.vo.GuestbookVO();
        _jspx_page_context.setAttribute("vo", vo, javax.servlet.jsp.PageContext.PAGE_SCOPE);
        out.write('\r');
        out.write('\n');
        out.write('	');
        org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("vo"), request);
        out.write('\r');
        out.write('\n');
      }
      out.write('\r');
      out.write('\n');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${vo}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br/>\r\n");
      out.write("\r\n");

	// vo 클래스 => 글 1건을 기억하는 클래스
	// List 클래스 => 1 페이지 분량의 글 목록과 페이징 작업에 사용할 8개의 변수를 기억하는 
	// 클래스
	// service 클래스 => sql 명령을 실행하기 전에 필요한 전처리 작업을 실행하는 클래스
	// => 비지니스 로직을 작성하는 클래스
	// DAO(Data Access Object) => sql 명령을 실행하는 클래스 => sql 명령 1개당 메소드 1개
	
	// insert.jsp에서 넘어온 데이터를 guestbook 테이블에 저장한다.
	// 테이블에 저장할 데이터가 저장된 객체(vo)를 전처리 작업을 하기 위해서 service 클래스로
	// 넘겨서 DAO 클래스 sql 명령을 실행하기 전에 필요한 작업이 있다면 실행한다.
	InsertService.getInstance().insert(vo);
	
	
	
	// 테이블에 글 1건을 저장했으면 테이블에 정장된 글을 브라우저에 출력하기 위해서 1페이지
	// 분량의 글 목록을 얻어오는 페이지(list.jsp)로 넘겨준다.
	response.sendRedirect("list.jsp");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
