/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-06-28 01:26:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.tjoeun.onLinePoll.PollRead;
import java.util.ArrayList;

public final class pollRead_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.tjoeun.onLinePoll.PollRead");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>투표하기</title>\r\n");
      out.write("\r\n");
      out.write("<!-- favicon: 웹 브라우저의 주소창에 표시되는 웹 사이트를 대표하는 이미지이다. -->\r\n");
      out.write("<link rel=\"icon\" href=\"./logo.png\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 투표 항목이 저장된 텍스트 파일을 읽어서 웹 브라우저에 출력한다. -->\r\n");

// 이클립스는 프로젝트를 실행하면 프로젝트를 이클립스가 내부적으로 사용하는 웹 서버에 
// 복사하고 실행한다.
// application.getRealPath("/") 메소드를 실행하면 프로젝트가 실행되는 실제(real) 
// 경로(path)를 얻어온다.
//	out.println(application.getRealPath("/")+"<br>");
// C:\k_digital\web\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\k20230501_1_onLinePoll\
//	out.println(application.getRealPath("/")+"poll.txt<br>");
// C:\k_digital\web\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\k20230501_1_onLinePoll\poll.txt

// 투표 내용이 저장된 파일을 읽어올 경로와 파일의 이름을 설정한다.
	String filepath = application.getRealPath("/")+"poll.txt";
// 투표 내용이 저장된 텍스트 파일을 읽어오는 메소드를 실행한다.
	ArrayList<String> poll = PollRead.pollRead(filepath);
//	out.println(poll);
/* 	for (String str : poll)
	{
		out.println(str +"<br>");
	} */
	
// 투표 항목의 개수
	int itemCount = (poll.size()-1)/2;
//	out.println(itemCount + "<br>");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  \r\n");
      out.write("	cellspacing: 셀과 셀 사이의 간격\r\n");
      out.write("	cellpadding: 셀 안 여백, 셀을 구성하는 선과 셀 내부의 문자와의 간격\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("<form action=\"pollWrite.jsp\" method=\"post\">\r\n");
      out.write("<table border=\"1\" width=\"500\" align=\"center\" cellspacing=0 cellpadding=\"5\">\r\n");
      out.write("	<tr> <!-- 줄, 행 -->\r\n");
      out.write("		<th> <!-- 칸, 표의 첫줄 또는 첫 열을 구성하는 칸, 굵게 및 가운데 정렬되서 표시된다. -->\r\n");
      out.write("			");
      out.print(poll.get(0));
      out.write(" <!-- 표현식, 간단한 출력문 -->\r\n");
      out.write("		</th>\r\n");
      out.write("	</tr>\r\n");

// 투표 항목의 개수만큼 반복하며 radio 버튼과 투표 항목을 출력한다.
	for(int i =1; i<=itemCount; i++)
	{

      out.write("\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td> <!-- 칸, 표의 첫 줄 또는 첫 열을 제외한 나머지를 구성하는 칸, 왼쪽 정렬-->\r\n");
      out.write("				<input type=\"radio\" name=\"poll\" value=\"");
      out.print(i);
      out.write('"');
      out.write('>');
      out.write(' ');
      out.print(poll.get(i));
      out.write("\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");

	}

      out.write("\r\n");
      out.write("	<!-- 투표하기 버튼과 결과보기 버튼을 만든다. -->\r\n");
      out.write("	<tr>\r\n");
      out.write("		<td align=\"center\"> \r\n");
      out.write("				<input type=\"submit\" value=\"투표하기\">\r\n");
      out.write("				<input type=\"button\" value=\"결과보기\" onclick=\"location.href='pollResult.jsp'\">\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("</table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
