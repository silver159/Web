/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-06-29 08:25:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class myInfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- html 주석: 지정 => crtl + shift + /, 해제 => crtl + shift + \\ -->\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>myInfo</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!--  \r\n");
      out.write("	html은 spacebar를 여러번 입력해도 1칸밖에 떨어지지 않고 enter 키를\r\n");
      out.write("	여러번 눌러도 줄이 변경되지 않는다.\r\n");
      out.write("	2칸 이상 연속해서 띄우려면 &nbsp;를 띄울 칸을 개수만큼 입력하고\r\n");
      out.write("	줄을 바꾸려면 <br> 태그를 사용한다.\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("myInfo.jsp &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;입니다.<br><br><br><br><br>반갑습니다.\r\n");
      out.write("\r\n");
      out.write("<!-- html에서는 println이 줄이 안 바뀐다. 하지만 javascript에서는 잘 작동한다. -->\r\n");
 
	out.println("출력할 내용<br>");
	out.println(application.getRealPath("/"));

      out.write("\r\n");
      out.write("<!--\r\n");
      out.write("	현재 페이지에 입력한 데이터를 특정 페이지로 전송하려면 전송할 데이터를 입력하는\r\n");
      out.write("	코드를  <form> ~ </form> 사이에 작성해야 한다.\r\n");
      out.write("	action 속성은 전송(submit) 버튼이 클릭되면 form에 입력한 데이터를 가지고 넘어갈\r\n");
      out.write("	jsp 페이지 이름을 쓴다. 아무것도 안쓰거나 \"?\"만 입력하면 현재 페이지를 요청한다.\r\n");
      out.write("	method 속성은 action 페이지로 데이터가 전송될 때 정보가 url(주소) 창에 표시되는\r\n");
      out.write("	여부를 지정한다.\r\n");
      out.write("	method 속성의 기본값은 \"get\"이고 \"get\" 방식은 전송되는 데이터가 url 창에 표시되고\r\n");
      out.write("	\"post\"로 변경되면 url 창에 표시되지 않는다.\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
      out.write("<form action=\"myInfoOK.jsp\" method=\"post\">\r\n");
      out.write("	<label>이름:<input type=\"text\" name=\"name\"></label><br>\r\n");
      out.write("	<label>아이디:<input type=\"text\" name=\"id\"></label><br>\r\n");
      out.write("	<!-- type=\"password\"일 경우 한글을 타이핑해서 넣을 수 없다. -->\r\n");
      out.write("	<label>비밀번호:<input type=\"password\" name=\"password\"></label><br>\r\n");
      out.write("	<label>나이:<input type=\"text\" name=\"age\"></label><br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- <label>태그로 지정된 위치 어느곳이나 클릭하면 textbox 안으로 들어간다.  -->\r\n");
      out.write("	\r\n");
      out.write("	<!-- radio에서 name 속성을 똑같이하면 한번에 하나만 찍힌다. -->\r\n");
      out.write("	<!-- \r\n");
      out.write("		radio와 checkbox는 같은 그룹끼리 반드시 같은 이름의 name 속성을 지정해서 그룹으로\r\n");
      out.write("		묶어야 한다.\r\n");
      out.write("		checked=\"checked\" 속성을 지정하면 브라우저에 표시될 때 기본값으로 선택 여부를\r\n");
      out.write("		지정할 수 있다.\r\n");
      out.write("		checked=\"checked\" 속성은 radio에서는 맨 마지막에 지정한 속성이 유효한 속성으로\r\n");
      out.write("		취급되고 checkbox에서는 지정하는 대로 선택된다.\r\n");
      out.write("		radio와 checkbox는 컨트롤을 화면에 표시하는 기능밖에 없기 때문에 선택했을 때 다음\r\n");
      out.write("		페이지로 넘겨줄 데이터를 value 속성을 사용해서 넣어줘야 한다.\r\n");
      out.write("		value 속성을 지정하지 않았을 때 \r\n");
      out.write("		선택한 경우 \"on\"이 선택하지 않으면 null이 다음 페이지로 넘어간다.\r\n");
      out.write("	 -->\r\n");
      out.write("	\r\n");
      out.write("	<!-- radio -->\r\n");
      out.write("	<fieldset style=\"width: 120px;\">\r\n");
      out.write("		<legend>성별</legend>\r\n");
      out.write("		<input type= \"radio\" name=\"gender\" value=\"true\">남자\r\n");
      out.write("		<input type= \"radio\" name=\"gender\" value=\"false\" checked=\"checked\">여자\r\n");
      out.write("	</fieldset><br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- checkbox -->\r\n");
      out.write("	<fieldset style=\"width: 180px;\">\r\n");
      out.write("		<legend>취미</legend>\r\n");
      out.write("		<input type=\"checkbox\" name=\"hobbies\" value=\"등산\"checked=\"checked\">등산\r\n");
      out.write("		<input type=\"checkbox\" name=\"hobbies\" value=\"바둑\">바둑\r\n");
      out.write("		<input type=\"checkbox\" name=\"hobbies\" value=\"낚시\"checked=\"checked\">낚시\r\n");
      out.write("	</fieldset><br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 콤보상자 만들기 -->\r\n");
      out.write("	<!--  \r\n");
      out.write("		콤보상자나 목록상자는 별도의 스타일을 지정하지 않으면 <option> 태그에 입력한 문자열\r\n");
      out.write("		중 가장 긴 문자열 길이에 맞춰서 크기가 결정된다.\r\n");
      out.write("		콤보상자는 첫 번째 <option> 태그에 입력한 내용이 기본적으로 표시되는데 selected=\"selected\"\r\n");
      out.write("		속성을 지정하면 이 속성이 지정된 <option> 태그에 입력한 내용을 기본값으로 표시할 수 있다.\r\n");
      out.write("	-->\r\n");
      out.write("	<select name=\"trip\" style=\"width: 150px; height: 30px;\">\r\n");
      out.write("		<option>괌</option>\r\n");
      out.write("		<option selected=\"selected\">코타키나발루</option>\r\n");
      out.write("		<option>다낭</option>\r\n");
      out.write("		<option>나트랑</option>\r\n");
      out.write("		<option>푸꾸옥</option>\r\n");
      out.write("		<option>대만</option>\r\n");
      out.write("		<option>보라카이</option>\r\n");
      out.write("	</select><br><br>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 목록상자 만들기 -->\r\n");
      out.write("	<!--  \r\n");
      out.write("		<select> 태그에 multiple=\"multiple\" 속성을 지정하면 목록상자가 만들어진다.\r\n");
      out.write("		목록상자에 표시되는 아이템의 개수는 4개가 기본값으로 표시되고 size 속성을 지정하면 \r\n");
      out.write("		지정한 만큼 표시된다.\r\n");
      out.write("	-->\r\n");
      out.write("	<select name=\"travel\" style=\"width: 150px;\" multiple=\"multiple\" size=\"7\">\r\n");
      out.write("		<option>괌</option>\r\n");
      out.write("		<option>코타키나발루</option>\r\n");
      out.write("		<option>다낭</option>\r\n");
      out.write("		<option>나트랑</option>\r\n");
      out.write("		<option>푸꾸옥</option>\r\n");
      out.write("		<option>대만</option>\r\n");
      out.write("		<option>보라카이</option>\r\n");
      out.write("	</select><br><br>	\r\n");
      out.write("	\r\n");
      out.write("	<!--  \r\n");
      out.write("		<textarea> 태그에는 value 속성이 없고 <textarea> ~ </textarea> 사이를 value로 취급한다.\r\n");
      out.write("		<textarea>와 <textarea> 사이에 공백을 두지 않는다.\r\n");
      out.write("	-->\r\n");
      out.write("	메모<br>\r\n");
      out.write("	<textarea rows=\"10\" cols=\"60\" name=\"content\" style=\"resize: none;\"></textarea><br><br>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<input type=\"submit\" value=\"정보보기\">\r\n");
      out.write("	<input type=\"reset\" value=\"다시쓰기\">\r\n");
      out.write("	<input type=\"button\" value=\"그냥버튼\" onclick=\"alert('꽝~~~~~~~~~~')\">\r\n");
      out.write("	<button type=\"submit\">정보보기</button>\r\n");
      out.write("	<button type=\"reset\">다시쓰기</button>\r\n");
      out.write("	<button type=\"button\" onclick=\"alert('꺄~~~~~~~~~~')\">그냥버튼</button>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
